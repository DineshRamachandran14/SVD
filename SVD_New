{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "abefad65",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "#Import the required python libraries:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a458a21a",
   "metadata": {},
   "source": [
    "Read the dataset from where it is downloaded in the system. It consists of two \u0000les ‘ratings.dat’ and ‘movies.dat’ which need to be read."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cc72cfa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.io.parsers.read_csv('ratings.dat', names=['user_id', 'movie_id', 'rating', 'time'], engine='python', delimiter='::')\n",
    "\n",
    "movie_data = pd.io.parsers.read_csv('movies.dat', names=['movie_id', 'title', 'genre'], engine='python', delimiter='::')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "753db808",
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings_mat = np.ndarray(\n",
    "    shape=(np.max(data.movie_id.values), np.max(data.user_id.values)), dtype=np.uint8)\n",
    "ratings_mat[data.movie_id.values-1, data.user_id.values-1] = data.rating.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8af4186c",
   "metadata": {},
   "outputs": [],
   "source": [
    "normalised_mat = ratings_mat - np.asarray([(np.mean(ratings_mat, 1))]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "13710bec",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = normalised_mat.T / np.sqrt(ratings_mat.shape[0] - 1) \n",
    "U, S, V = np.linalg.svd(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "16835b52",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a function to calculate the cosine similarity. Sort by most similar and return the top N results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8e6268b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def top_cosine_similarity(data, movie_id, top_n=10):\n",
    "    index = movie_id - 1 # Movie id starts from 1 in the dataset\n",
    "    movie_row = data[index, :]\n",
    "    magnitude = np.sqrt(np.einsum('ij, ij -> i', data, data))\n",
    "    similarity = np.dot(movie_row, data.T) / (magnitude[index] * magnitude) \n",
    "    sort_indexes = np.argsort(-similarity)\n",
    "    return sort_indexes[:top_n]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "59ce10e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define a function to print top N similar movies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "48293eb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_similar_movies(movie_data, movie_id, top_indexes): \n",
    "    print('Recommendations for {0}: \\n'.format( movie_data[movie_data.movie_id == movie_id].title.values[0])) \n",
    "    for id in top_indexes + 1:\n",
    "        print(movie_data[movie_data.movie_id == id].title.values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e9ec1d1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#k-principal components to represent movies, movie_id to find recommendations, top_n p \n",
    "k = 50\n",
    "movie_id = 10 # (getting an id from movies.dat)\n",
    "top_n = 10\n",
    "sliced = V.T[:, :k] # representative data\n",
    "indexes = top_cosine_similarity(sliced, movie_id, top_n)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4e10a035",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommendations for GoldenEye (1995): \n",
      "\n",
      "GoldenEye (1995)\n",
      "Waterworld (1995)\n",
      "Broken Arrow (1996)\n",
      "Outbreak (1995)\n",
      "Cliffhanger (1993)\n",
      "Die Hard: With a Vengeance (1995)\n",
      "Rumble in the Bronx (1995)\n",
      "Executive Decision (1996)\n",
      "Perfect World, A (1993)\n",
      "River Wild, The (1994)\n"
     ]
    }
   ],
   "source": [
    "#Print the top N similar movies.\n",
    "\n",
    "print_similar_movies(movie_data, movie_id, indexes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66184a99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
